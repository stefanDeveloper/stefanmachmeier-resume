
@article{schroder_vtable_2023,
	title = {Vtable hijacking: {Object} {Type} {Integrity} for run- time type information},
	shorttitle = {Vtable hijacking},
	url = {https://journals.ub.uni-heidelberg.de/index.php/emcl-pp/article/view/94354},
	doi = {10.11588/EMCLPP.2023.1.94354},
	abstract = {Attackers try to hijack the control-flow of a victim’s process by exploiting a run-time vulnerability. Vtable hijacking is a state-of-the-art technique adversaries use to conduct control-flow hijacking attacks. It abuses the reliance of language constructs related to polymorphism on dynamic type information. The Control Flow Integrity (CFI) security policy is a well-established solution designed to prevent attacks that corrupt the control-flow. Deployed defense mechanisms based on CFI are often generic, which means that they do not consider high-level programming language semantics. This makes them vulnerable to vtable hijacking attacks. Object Type Integrity (OTI) is an orthogonal security policy that specifically addresses vtable hijacking. CFIXX is a Clang compiler extension that enforces OTI in the context of dynamic dispatch, which prevents vtable hijacking in this setting. However, this extension does not enforce OTI in context of polymorphism. The contribution of this work is a practical implementation to enable OTI in the context of C++’s run-time type information for the dynamic\_cast expressions and the typeid operator.},
	language = {en},
	urldate = {2023-03-16},
	journal = {Preprint Series of the Engineering Mathematics and Computing Lab},
	author = {Schröder, Marco and Machmeier, Stefan and Heuveline, Vincent},
	month = mar,
	year = {2023},
	note = {Publisher: Preprint Series of the Engineering Mathematics and Computing Lab},
	keywords = {unread},
	pages = {Nr. 1 (2023): Vtable hijacking: Object Type Integrity for runtime type information},
	file = {Full Text:/home/smachmeier/Zotero/storage/58C4A8XI/Schröder et al. - 2023 - Vtable hijacking Object Type Integrity for run- t.pdf:application/pdf},
}
